<honeycomb><uniform name="r" type="float" value="0.79"/><uniform max="10" min="0" name="height" type="float" value="1"/><uniform name="mytexture" texture="arrow.png" type="sampler2D" value="1"/><vertexProgram>
 
varying vec4 color;
    
  void main( void )
  {
	gl_Position = gl_Vertex;
	color = gl_Color;
gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
  }
  </vertexProgram><geometryProgram inputType="POINTS" numVertices="1024" outputType="TRIANGLE_STRIP">
#version 120 
#extension GL_EXT_geometry_shader4 : enable  

varying in vec4 color[1];
varying out vec4 ocolor;
uniform float r;
uniform float height;

vec4 Ambient;
vec4 Diffuse;
vec4 Specular;


void pointLight(in int i, in vec3 normal, in vec3 eye, in vec3 ecPosition3)
{
   float nDotVP;       // normal . light direction
   float nDotHV;       // normal . light half vector
   float pf;           // power factor
   float attenuation;  // computed attenuation factor
   float d;            // distance from surface to light source
   vec3  VP;           // direction from surface to light position
   vec3  halfVector;   // direction of maximum highlights

   // Compute vector from surface to light position
   VP = vec3 (gl_LightSource[i].position) - ecPosition3;

   // Compute distance between surface and light position
   d = length(VP);

   // Normalize the vector from surface to light position
   VP = normalize(VP);

   // Compute attenuation
   attenuation = 1.0 / (gl_LightSource[i].constantAttenuation +
       gl_LightSource[i].linearAttenuation * d +
       gl_LightSource[i].quadraticAttenuation * d * d);

   halfVector = normalize(VP + eye);

   nDotVP = dot(normal, VP);
  if(nDotVP &lt; 0)
      normal = -normal;

   nDotVP = max(0.0, dot(normal, VP));
   nDotHV = max(0.0, dot(normal, halfVector));

   if (nDotVP == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       pf = pow(nDotHV, gl_FrontMaterial.shininess);

   }
   Ambient  += gl_LightSource[i].ambient * attenuation;
   Diffuse  += gl_LightSource[i].diffuse * nDotVP * attenuation;
   Specular += gl_LightSource[i].specular * pf * attenuation;
}

void directionalLight(in int i, in vec3 normal)
{
   float nDotVP;         // normal . light direction
   float nDotHV;         // normal . light half vector
   float pf;             // power factor

   nDotVP = max(0.0, dot(normal, normalize(vec3 (gl_LightSource[i].position))));
   nDotHV = max(0.0, dot(normal, vec3 (gl_LightSource[i].halfVector)));

   if (nDotVP == 0.0)
   {
       pf = 0.0;
   }
   else
   {
       pf = pow(nDotHV, gl_FrontMaterial.shininess);

   }
   Ambient  += gl_LightSource[i].ambient;
   Diffuse  += gl_LightSource[i].diffuse * nDotVP;
   Specular += gl_LightSource[i].specular * pf;
}


vec4 flight(in vec3 normal, in vec4 ecPosition, float alphaFade)
{
    vec4 color;
    vec3 ecPosition3;
    vec3 eye;

    ecPosition3 = (vec3 (ecPosition)) / ecPosition.w;
    eye = vec3 (0.0, 0.0, 1.0);

    // Clear the light intensity accumulators
    Ambient  = vec4 (0.0);
    Diffuse  = vec4 (0.0);
    Specular = vec4 (0.0);

    pointLight(0, normal, eye, ecPosition3);

    //pointLight(1, normal, eye, ecPosition3);

    //directionalLight(2, normal);

    color = gl_FrontLightModelProduct.sceneColor +
      Ambient  * gl_FrontMaterial.ambient +
      Diffuse  * gl_FrontMaterial.diffuse;
    color += Specular * gl_FrontMaterial.specular;
    color = clamp( color, 0.0, 1.0 );
    vec4 FrontColor = color;

    FrontColor.a *= alphaFade;
return FrontColor;
}


  void main(void)
  {
     vec3 transformedNormal;
	transformedNormal = normalize(gl_NormalMatrix * vec3(0,0,1));
	vec4 p = gl_in[0].gl_Position+vec4(-2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();
	
	p = gl_in[0].gl_Position+vec4(-1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex(); 
	
	p = gl_in[0].gl_Position+vec4(-1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex();	
	
	p = gl_in[0].gl_Position+vec4(1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();	
	p = gl_in[0].gl_Position+vec4(1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex();	
    p = gl_in[0].gl_Position+vec4(2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();
 	EndPrimitive();
if(color[0].a &gt; r)
{
	vec4 p = gl_in[0]+vec4(-2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();
	
	p = gl_in[0]+vec4(-1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex(); 
	
	p = gl_in[0]+vec4(-1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex();	
	
	p = gl_in[0]+vec4(1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();	
	p = gl_in[0]+vec4(1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	
	EmitVertex();	
    p = gl_in[0]+vec4(2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;

	EmitVertex();
 	EndPrimitive();	
}	
	transformedNormal = normalize(gl_NormalMatrix * vec3(0,1,0));
    p = gl_in[0].gl_Position+vec4(-1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(-1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
	
	transformedNormal = normalize(gl_NormalMatrix * vec3(0.866,0.5,0));
    p = gl_in[0].gl_Position+vec4(1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
	
	transformedNormal = normalize(gl_NormalMatrix * vec3(0.866,-0.5,0));
    p = gl_in[0].gl_Position+vec4(2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
	
	transformedNormal = normalize(gl_NormalMatrix * vec3(0,-1,0));
    p = gl_in[0].gl_Position+vec4(-1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(-1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
	
	transformedNormal = normalize(gl_NormalMatrix * vec3(-0.866,-0.5,0));
    p = gl_in[0].gl_Position+vec4(-2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(-1.44,-2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(-2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(-1.44,-2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
	
	transformedNormal = normalize(gl_NormalMatrix * vec3(-0.866,0.5,0));
    p = gl_in[0].gl_Position+vec4(-2.89,0,0,1);
	ocolor = flight(transformedNormal,p,1.0);
    gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();
    p = gl_in[0].gl_Position+vec4(-1.44,2.5,0,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex(); 
    p = gl_in[0]+vec4(-2.89,0,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
    p = gl_in[0]+vec4(-1.44,2.5,height*color[0].gl_Position.r,1);
	ocolor = flight(transformedNormal,p,1.0);
	gl_Position = gl_ModelViewProjectionMatrix * p;
                          gl_ClipVertex = gl_ModelViewMatrix*p;
	EmitVertex();	
 	EndPrimitive();
   }
													
</geometryProgram><fragmentProgram>
   varying in vec4 ocolor;

   void main( void )
   {
		

			gl_FragColor = ocolor;

          
   }
  </fragmentProgram></honeycomb>
